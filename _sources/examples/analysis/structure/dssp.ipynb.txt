{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DSSP\n",
    "\n",
    "Here we calculate the secondary structure of adenylate kinase, using the DSSP algorithm.\n",
    "\n",
    "**Last executed:** Mar 10, 2020 with MDAnalysis 0.20.2-dev0\n",
    "\n",
    "**Last updated:** March 2020\n",
    "\n",
    "**Minimum version of MDAnalysis:** 1.0.0\n",
    "\n",
    "**Packages required:**\n",
    "    \n",
    "* MDAnalysis (<a data-cite=\"michaud-agrawal_mdanalysis_2011\" href=\"https://doi.org/10.1002/jcc.21787\">Michaud-Agrawal *et al.*, 2011</a>, <a data-cite=\"gowers_mdanalysis_2016\" href=\"https://doi.org/10.25080/Majora-629e541a-00e\">Gowers *et al.*, 2016</a>)\n",
    "* MDAnalysisTests\n",
    "\n",
    "**Optional packages for visualisation:**\n",
    "\n",
    "* [matplotlib](https://matplotlib.org)\n",
    "\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Note**\n",
    "\n",
    "`MDAnalysis.analysis.secondary_structure.dssp` wraps MDTraj (<a data-cite=\"mcgibbon_mdtraj_2015\" href=\"https://doi.org/10.1016/j.bpj.2015.08.015\">McGibbon *et al.*, 2015</a>) to run the DSSP algorithm (<a data-cite=\"kabsch_dictionary_1983\" href=\"https://doi.org/10.1002/bip.360221211\">Kabsch and Sander, 1983</a>, <a data-cite=\"touw_series_2015\" href=\"https://doi.org/10.1093/nar/gku1028\">Touw *et al.*, 2015</a>). Please cite these sources if you use this module in published work. \n",
    "\n",
    "</div>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import MDAnalysis as mda\n",
    "from MDAnalysis.tests.datafiles import TPR, XTC\n",
    "from MDAnalysis.analysis import secondary_structure as ss\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The test files we will be working with here are a trajectory of adenylate kinase (AdK), a phosophotransferase enzyme. (<a data-cite=\"beckstein_zipping_2009\" href=\"https://doi.org/10.1016/j.jmb.2009.09.009\">Beckstein *et al.*, 2009</a>)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "u = mda.Universe(TPR, XTC)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating DSSP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual, you can pass in a selection string with `select`. However, the code will try to find the backbone atoms of proteins anyway, by using the provided atom names. These are given as strings -- if there are multiple names given, they are treated in descending order of preference. Here our last residue does not have an oxygen atom called 'O', but rather, 'O1' or 'O2'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'H', 'CA', 'HA1', 'HA2', 'C', 'O1', 'O2'], dtype=object)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u.residues[213].atoms.names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is important that the code can find backbone atoms in all residues that should be treated as \"protein-like\", so we pass 'O O1' to `o_name` below. You can also choose to add your resulting secondary structures as an attribute to the topology, using `add_topology_attr`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "dssp = ss.DSSP(u, select='protein', \n",
    "               o_name='O O1',\n",
    "               n_name='N',\n",
    "               c_name='C',\n",
    "               ca_name='CA',\n",
    "               add_topology_attr=True).run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The estimated secondary structure of each of your selected residues is in `dssp.ss_codes`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 214)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dssp.ss_codes.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is also a similar array of estimated secondary structures, but using simplified structure names (so only 'Helix', 'Strand', and 'Coil') at `dssp.ss_simple`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 214)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dssp.ss_simple.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The counts of each structure are available at ``ss_counts`` and ``simple_counts``, for the full array of secondary structures and the simplified versions, respectively. For example, the number of residues involved in helices fluctuates around 100 per frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([107, 102,  97, 100,  97, 109, 100, 102,  97,  99])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dssp.simple_counts['Helix']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most common structure for each residue can be found at ``ss_mode`` or ``simple_mode``. As shown below, the first residue is usually found as a random coil."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dssp.ss_mode[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is this most common secondary structure that is added as a topology attribute when you pass `add_topology_attr=True`. This allows you to quickly find which residues are, for example, involved in alpha-helices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['LYSH', 'GLY', 'THR', 'GLN', 'ALA', 'GLN', 'PHE', 'ILE', 'MET',\n",
       "       'GLU', 'LYSH', 'TYR', 'ASP', 'MET', 'LEU', 'ARG', 'ALA', 'ALA',\n",
       "       'VAL', 'LYSH', 'SER', 'GLU', 'LEU', 'GLY', 'LYSH', 'GLN', 'ALA',\n",
       "       'LYSH', 'ASP', 'ILE', 'MET', 'ASP', 'ALA', 'ASP', 'GLU', 'LEU',\n",
       "       'VAL', 'ILE', 'ALA', 'LEU', 'VAL', 'LYSH', 'GLU', 'ARG', 'ILE',\n",
       "       'PRO', 'GLN', 'ALA', 'ASP', 'ALA', 'MET', 'LYSH', 'GLU', 'ASP',\n",
       "       'GLU', 'LEU', 'ILE', 'VAL', 'ASP', 'ARG', 'ILE', 'VAL', 'GLU',\n",
       "       'GLU', 'THR', 'VAL', 'ARG', 'LYSH', 'ARG', 'LEU', 'VAL', 'GLU',\n",
       "       'TYR', 'HISB', 'GLN', 'MET', 'THR', 'ALA', 'PRO', 'LEU', 'ILE',\n",
       "       'GLY', 'TYR', 'TYR', 'SER', 'LYSH', 'GLU', 'ALA', 'GLU', 'ALA',\n",
       "       'VAL', 'ALA', 'GLU', 'VAL', 'ARG', 'ALA', 'ASP', 'LEU', 'GLU',\n",
       "       'LYSH', 'ILE'], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aH = u.residues[u.residues.secondary_structures=='H']\n",
    "aH.resnames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a convenience plotting function to quickly visualise the structural content of each frame. You can plot either the normal structures or the simplified versions, and either as a bar or a line graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x116f1a4d0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dssp.plot_content(kind='bar', simple=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11ab76550>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dssp.plot_content(kind='line', simple=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "[1] Oliver Beckstein, Elizabeth&nbsp;J. Denning, Juan&nbsp;R. Perilla, and Thomas&nbsp;B. Woolf.\n",
    "Zipping and <span class=\"bibtex-protected\">Unzipping</span> of <span class=\"bibtex-protected\">Adenylate</span> <span class=\"bibtex-protected\">Kinase</span>: <span class=\"bibtex-protected\">Atomistic</span> <span class=\"bibtex-protected\">Insights</span> into the <span class=\"bibtex-protected\">Ensemble</span> of <span class=\"bibtex-protected\">Open</span>↔<span class=\"bibtex-protected\">Closed</span> <span class=\"bibtex-protected\">Transitions</span>.\n",
    "<em>Journal of Molecular Biology</em>, 394(1):160–176, November 2009.\n",
    "00107.\n",
    "URL: <a href=\"https://linkinghub.elsevier.com/retrieve/pii/S0022283609011164\">https://linkinghub.elsevier.com/retrieve/pii/S0022283609011164</a>, <a href=\"https://doi.org/10.1016/j.jmb.2009.09.009\">doi:10.1016/j.jmb.2009.09.009</a>.\n",
    "\n",
    "[2] Richard&nbsp;J. Gowers, Max Linke, Jonathan Barnoud, Tyler J.&nbsp;E. Reddy, Manuel&nbsp;N. Melo, Sean&nbsp;L. Seyler, Jan Domański, David&nbsp;L. Dotson, Sébastien Buchoux, Ian&nbsp;M. Kenney, and Oliver Beckstein.\n",
    "<span class=\"bibtex-protected\">MDAnalysis</span>: <span class=\"bibtex-protected\">A</span> <span class=\"bibtex-protected\">Python</span> <span class=\"bibtex-protected\">Package</span> for the <span class=\"bibtex-protected\">Rapid</span> <span class=\"bibtex-protected\">Analysis</span> of <span class=\"bibtex-protected\">Molecular</span> <span class=\"bibtex-protected\">Dynamics</span> <span class=\"bibtex-protected\">Simulations</span>.\n",
    "<em>Proceedings of the 15th Python in Science Conference</em>, pages 98–105, 2016.\n",
    "00152.\n",
    "URL: <a href=\"https://conference.scipy.org/proceedings/scipy2016/oliver_beckstein.html\">https://conference.scipy.org/proceedings/scipy2016/oliver_beckstein.html</a>, <a href=\"https://doi.org/10.25080/Majora-629e541a-00e\">doi:10.25080/Majora-629e541a-00e</a>.\n",
    "\n",
    "[3] Wolfgang Kabsch and Christian Sander.\n",
    "Dictionary of protein secondary structure: <span class=\"bibtex-protected\">Pattern</span> recognition of hydrogen-bonded and geometrical features.\n",
    "<em>Biopolymers</em>, 22(12):2577–2637, 1983.\n",
    "13849 _eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/bip.360221211.\n",
    "URL: <a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/bip.360221211\">https://onlinelibrary.wiley.com/doi/abs/10.1002/bip.360221211</a>, <a href=\"https://doi.org/10.1002/bip.360221211\">doi:10.1002/bip.360221211</a>.\n",
    "\n",
    "[4] Robert&nbsp;T. McGibbon, Kyle&nbsp;A. Beauchamp, Matthew&nbsp;P. Harrigan, Christoph Klein, Jason&nbsp;M. Swails, Carlos&nbsp;X. Hernández, Christian&nbsp;R. Schwantes, Lee-Ping Wang, Thomas&nbsp;J. Lane, and Vijay&nbsp;S. Pande.\n",
    "<span class=\"bibtex-protected\">MDTraj</span>: <span class=\"bibtex-protected\">A</span> <span class=\"bibtex-protected\">Modern</span> <span class=\"bibtex-protected\">Open</span> <span class=\"bibtex-protected\">Library</span> for the <span class=\"bibtex-protected\">Analysis</span> of <span class=\"bibtex-protected\">Molecular</span> <span class=\"bibtex-protected\">Dynamics</span> <span class=\"bibtex-protected\">Trajectories</span>.\n",
    "<em>Biophysical Journal</em>, 109(8):1528–1532, October 2015.\n",
    "00508.\n",
    "URL: <a href=\"http://www.sciencedirect.com/science/article/pii/S0006349515008267\">http://www.sciencedirect.com/science/article/pii/S0006349515008267</a>, <a href=\"https://doi.org/10.1016/j.bpj.2015.08.015\">doi:10.1016/j.bpj.2015.08.015</a>.\n",
    "\n",
    "[5] Naveen Michaud-Agrawal, Elizabeth&nbsp;J. Denning, Thomas&nbsp;B. Woolf, and Oliver Beckstein.\n",
    "<span class=\"bibtex-protected\">MDAnalysis</span>: <span class=\"bibtex-protected\">A</span> toolkit for the analysis of molecular dynamics simulations.\n",
    "<em>Journal of Computational Chemistry</em>, 32(10):2319–2327, July 2011.\n",
    "00778.\n",
    "URL: <a href=\"http://doi.wiley.com/10.1002/jcc.21787\">http://doi.wiley.com/10.1002/jcc.21787</a>, <a href=\"https://doi.org/10.1002/jcc.21787\">doi:10.1002/jcc.21787</a>.\n",
    "\n",
    "[6] Wouter&nbsp;G. Touw, Coos Baakman, Jon Black, Tim A.&nbsp;H. te&nbsp;Beek, E.&nbsp;Krieger, Robbie&nbsp;P. Joosten, and Gert Vriend.\n",
    "A series of <span class=\"bibtex-protected\">PDB</span>-related databanks for everyday needs.\n",
    "<em>Nucleic Acids Research</em>, 43(D1):D364–D368, January 2015.\n",
    "00368 Publisher: Oxford Academic.\n",
    "URL: <a href=\"https://academic.oup.com/nar/article/43/D1/D364/2435537\">https://academic.oup.com/nar/article/43/D1/D364/2435537</a>, <a href=\"https://doi.org/10.1093/nar/gku1028\">doi:10.1093/nar/gku1028</a>."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (mda)",
   "language": "python",
   "name": "mda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
